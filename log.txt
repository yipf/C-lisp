( ( sin 1.000000 ) ( sin ( sin 1.570000 ) ) ( define ( quote x ) sin ) ( x ( x 1.570000 ) ) ( empty? ( quote ( ) ) ) ( define ( quote map ) ( lambda ( quote ( f l ) ) ( quote ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) ) ) map ( define ( quote l ) ( quote ( 1 2 3 ) ) ) l 
 ( car l ) 
 ( cdr l ) 
 ( cons ( car l ) ( cdr l ) ) 
 ( cond ( empty? l ) l ( cons ( car l ) ( cdr l ) ) ) 
 ( define ( quote sum ) ( lambda ( quote ( l ) ) ( quote ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) ) ) 
 ( + 1.000000 2.000000 ) 
 ( sin ( + 1.000000 0.570000 ) ) 
 ( sum ( quote ( ) ) ) 
 
 "end" ) 
=

core.c:220:	node	:: ( ( sin 1.000000 ) ( sin ( sin 1.570000 ) ) ( define ( quote x ) sin ) ( x ( x 1.570000 ) ) ( empty? ( quote ( ) ) ) ( define ( quote map ) ( lambda ( quote ( f l ) ) ( quote ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) ) ) map ( define ( quote l ) ( quote ( 1 2 3 ) ) ) l 
 ( car l ) 
 ( cdr l ) 
 ( cons ( car l ) ( cdr l ) ) 
 ( cond ( empty? l ) l ( cons ( car l ) ( cdr l ) ) ) 
 ( define ( quote sum ) ( lambda ( quote ( l ) ) ( quote ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) ) ) 
 ( + 1.000000 2.000000 ) 
 ( sin ( + 1.000000 0.570000 ) ) 
 ( sum ( quote ( ) ) ) 
 
 "end" ) 

core.c:220:	node	:: ( sin 1.000000 ) 

-------------->
core.c:223:	node	:: ( sin[FUNCTION] 1.000000 ) 

core.c:220:	node	:: ( sin ( sin 1.570000 ) ) 

core.c:220:	node	:: ( sin 1.570000 ) 

-------------->
core.c:223:	node	:: ( sin[FUNCTION] 1.570000 ) 

-------------->
core.c:223:	node	:: ( sin[FUNCTION] 1.000000 ) 

core.c:220:	node	:: ( define ( quote x ) sin ) 

-------------->
core.c:223:	node	:: ( define[FUNCTION] x sin[FUNCTION] ) 

core.c:220:	node	:: ( x ( x 1.570000 ) ) 

core.c:220:	node	:: ( x 1.570000 ) 

-------------->
core.c:223:	node	:: ( sin[FUNCTION] 1.570000 ) 

-------------->
core.c:223:	node	:: ( sin[FUNCTION] 1.000000 ) 

core.c:220:	node	:: ( empty? ( quote ( ) ) ) 

-------------->
core.c:223:	node	:: ( empty?[FUNCTION] ( ) ) 
EMPTY?
built-in-functions.c:122:	arg	:: ( ) 

core.c:220:	node	:: ( define ( quote map ) ( lambda ( quote ( f l ) ) ( quote ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) ) ) 

core.c:220:	node	:: ( lambda ( quote ( f l ) ) ( quote ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) ) 

-------------->
core.c:223:	node	:: ( lambda[FUNCTION] ( f l ) ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) 

-------------->
core.c:223:	node	:: ( define[FUNCTION] map ( lambda ( f l ) ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) ) 

core.c:220:	node	:: ( define ( quote l ) ( quote ( 1 2 3 ) ) ) 

-------------->
core.c:223:	node	:: ( define[FUNCTION] l ( 1 2 3 ) ) 

core.c:220:	node	:: ( car l ) 

-------------->
core.c:223:	node	:: ( car[FUNCTION] ( 1 2 3 ) ) 

core.c:220:	node	:: ( cdr l ) 

-------------->
core.c:223:	node	:: ( cdr[FUNCTION] ( 1 2 3 ) ) 

core.c:220:	node	:: ( cons ( car l ) ( cdr l ) ) 

core.c:220:	node	:: ( car l ) 

-------------->
core.c:223:	node	:: ( car[FUNCTION] ( 1 2 3 ) ) 

core.c:220:	node	:: ( cdr l ) 

-------------->
core.c:223:	node	:: ( cdr[FUNCTION] ( 1 2 3 ) ) 

-------------->
core.c:223:	node	:: ( cons[FUNCTION] 1 ( 2 3 ) ) 

core.c:220:	node	:: ( cond ( empty? l ) l ( cons ( car l ) ( cdr l ) ) ) 

core.c:220:	node	:: ( empty? l ) 

-------------->
core.c:223:	node	:: ( empty?[FUNCTION] ( 1 2 3 ) ) 
EMPTY?
built-in-functions.c:122:	arg	:: ( 1 2 3 ) 

core.c:220:	node	:: ( cons ( car l ) ( cdr l ) ) 

core.c:220:	node	:: ( car l ) 

-------------->
core.c:223:	node	:: ( car[FUNCTION] ( 1 2 3 ) ) 

core.c:220:	node	:: ( cdr l ) 

-------------->
core.c:223:	node	:: ( cdr[FUNCTION] ( 1 2 3 ) ) 

-------------->
core.c:223:	node	:: ( cons[FUNCTION] 1 ( 2 3 ) ) 

-------------->
core.c:223:	node	:: ( cond[FUNCTION] F ( 1 2 3 ) ( 1 2 3 ) ) 

core.c:220:	node	:: ( 1 2 3 ) 

-------------->
core.c:223:	node	:: ( 1 2 3 ) 

core.c:220:	node	:: ( define ( quote sum ) ( lambda ( quote ( l ) ) ( quote ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) ) ) 

core.c:220:	node	:: ( lambda ( quote ( l ) ) ( quote ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) ) 

-------------->
core.c:223:	node	:: ( lambda[FUNCTION] ( l ) ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) 

-------------->
core.c:223:	node	:: ( define[FUNCTION] sum ( lambda ( l ) ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) ) 

core.c:220:	node	:: ( + 1.000000 2.000000 ) 

-------------->
core.c:223:	node	:: ( +[FUNCTION] 1.000000 2.000000 ) 

built-in-functions.c:63:	arg	:: 1.000000 

built-in-functions.c:64:	next	:: 2.000000 

core.c:220:	node	:: ( sin ( + 1.000000 0.570000 ) ) 

core.c:220:	node	:: ( + 1.000000 0.570000 ) 

-------------->
core.c:223:	node	:: ( +[FUNCTION] 1.000000 0.570000 ) 

built-in-functions.c:63:	arg	:: 1.000000 

built-in-functions.c:64:	next	:: 0.570000 

-------------->
core.c:223:	node	:: ( sin[FUNCTION] 1.570000 ) 

core.c:220:	node	:: ( sum ( quote ( ) ) ) 

-------------->
core.c:223:	node	:: ( ( lambda ( l ) ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) ( ) ) 

apply lambda:
core.c:196:	l	:: ( lambda ( l ) ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) ) 

core.c:220:	node	:: ( cond ( empty? l ) 0.000000 ( quote ( + ( car l ) ( sum ( cdr l ) ) ) ) ) 

core.c:220:	node	:: ( empty? l ) 

-------------->
core.c:223:	node	:: ( empty?[FUNCTION] ( ) ) 
EMPTY?
built-in-functions.c:122:	arg	:: ( ) 

-------------->
core.c:223:	node	:: ( cond[FUNCTION] T 0.000000 ( + ( car l ) ( sum ( cdr l ) ) ) ) 

-------------->
core.c:223:	node	:: ( 0.841471 0.841471 x 0.841471 T map ( lambda ( f l ) ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) l ( 1 2 3 ) 
 1 
 ( 2 3 ) 
 ( 1 2 3 ) 
 ( 1 2 3 ) 
 sum 
 3.000000 
 1.000000 
 0.000000 
 
 "end" ) 
( 0.841471 0.841471 x 0.841471 T map ( lambda ( f l ) ( cond ( empty? l ) l ( cons ( f ( car l ) ) ( map f ( cdr l ) ) ) ) ) l ( 1 2 3 ) 
 1 
 ( 2 3 ) 
 ( 1 2 3 ) 
 ( 1 2 3 ) 
 sum 
 3.000000 
 1.000000 
 0.000000 
 
 "end" ) 
